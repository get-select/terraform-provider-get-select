<!-- /docs/ is auto generated from the provider schema, and the templates in /templates do not edit files in /docs directly. -->
# {{ .Name }} (Resource)

{{ .Description | trimspace }}

## About 

Usage Groups provide a flexible way of creating cost categories within SELECT. To learn more about usage groups, see the [SELECT documentation](https://select.dev/docs/reference/using-select/usage-groups).

## Example Usage

### Basic Usage Group

{{ tffile .ExampleFile }}

### Advanced Filter Expression Examples

#### Filter by Role and Warehouse
```hcl
resource "select_usage_group" "analytics_team" {
  name               = "Analytics Team"
  order              = 1
  budget             = 5000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "and"
    filters = [
      {
        field    = "role_name"
        operator = "in"
        values   = ["ANALYST", "DATA_SCIENTIST"]
      },
      {
        field    = "warehouse_name" 
        operator = "in"
        values   = ["ANALYTICS_WH", "ML_WH"]
      }
    ]
  })
}
```

#### Filter by User and Database
```hcl
resource "select_usage_group" "finance_users" {
  name               = "Finance Department"
  order              = 2
  budget             = 3000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "or"
    filters = [
      {
        field    = "user_name"
        operator = "in" 
        values   = ["finance_user_1", "finance_user_2"]
      },
      {
        field    = "database_name"
        operator = "=" 
        values   = ["FINANCE_DB"]
      }
    ]
  })
}
```

## Argument Reference

The following arguments are supported:

{{ .SchemaMarkdown | trimspace }}

## Filter Expressions

The `filter_expression_json` field accepts a JSON encoded object that will be validated when applied. There's a wide variety of fields that can be filtered on depending on the type of usage group (Snowflake account or organization owned). 

To explore the fields that can be filtered on, or for complicated filter expressions containing multiple statements, we suggest using the SELECT UI to configure something close to the structure you need, and then switching to JSON mode and copying the expression into your terraform code.

## Import

{{ .Name }} can be imported using the usage group set ID and usage group ID separated by a forward slash:

```bash
terraform import {{ .Name }}.example <usage_group_set_id>/<usage_group_id>
```

## Additional Information

### Order and Priority

The `order` field serves two purposes:
1. **Display Order**: Controls the order usage groups appear in the Select UI
2. **Cost Allocation Priority**: When multiple usage groups have overlapping filters, the one with the lower order value gets priority for cost allocation

We strongly recommend using unique order values within each usage group set.
