<!-- /docs/ is auto generated from the provider schema, and the templates in /templates do not edit files in /docs directly. -->
# {{ .Name }} (Resource)

{{ .Description | trimspace }}

## About 

Usage Groups provide a flexible way to create cost categories within SELECT. Learn more in the [SELECT documentation](https://select.dev/docs/reference/using-select/usage-groups).

## Example Usage

### Basic Usage Group

{{ tffile .ExampleFile }}

### Advanced Filter Examples

#### Filter by Role and Warehouse
```hcl
resource "select_usage_group" "analytics_team" {
  name               = "Analytics Team"
  order              = 1
  budget             = 5000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "and"
    filters = [
      {
        field    = "role_name"
        operator = "in"
        values   = ["ANALYST", "DATA_SCIENTIST"]
      },
      {
        field    = "warehouse_name" 
        operator = "in"
        values   = ["ANALYTICS_WH", "ML_WH"]
      }
    ]
  })
}
```

#### Filter by User or Warehouse
```hcl
resource "select_usage_group" "finance_users" {
  name               = "Finance Department"
  order              = 2
  budget             = 3000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "or"
    filters = [
      {
        field = "user_name"
        operator = "in"
        values = ["USER_NAME"]
      },
      {
        field = "warehouse_name"
        operator = "in"
        values = ["WAREHOUSE_NAME_LARGE", "WAREHOUSE_NAME_SMALL"]
      }
    ]
  })
}
```

### Usage Group Based on Snowflake Tags

Create usage groups based on Snowflake tags for better organization:

```hcl
resource "snowflake_tag" "analytics_tag" {
  name     = "Analytics Team Tag"
  database = "database"
  schema   = "schema"
}

resource "snowflake_tag_association" "user_tag_assignment" {
  object_identifier {
    name = "ANALYST_USER"
  }
  object_type = "USER"
  tag_id      = snowflake_tag.analytics_tag.fully_qualified_name
  tag_value   = "analytics"
}

resource "select_usage_group" "analytics_users" {
  name               = snowflake_tag.analytics_tag.name
  order              = 1
  budget             = 5000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "or"
    filters = [
      {
        field    = "user_tags"
        values   = [snowflake_tag.analytics_tag.name]
        operator = "array_contains"
      }
    ]
  })
}
```

### Creating Multiple Usage Groups

Use `for_each` to dynamically create usage groups for teams:

```hcl
locals {
  teams = {
    analytics = {
      name   = "Analytics Team"
      budget = 5000.0
      users  = ["analyst_1", "data_scientist_1"]
    }
    finance = {
      name   = "Finance Team"
      budget = 3000.0
      users  = ["finance_manager", "accountant_1"]
    }
  }
}

resource "select_usage_group" "team_groups" {
  for_each = local.teams
  
  name               = each.value.name
  order              = index(keys(local.teams), each.key) + 1
  budget             = each.value.budget
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "or"
    filters = [
      {
        field    = "user_name"
        operator = "in"
        values   = each.value.users
      }
    ]
  })
}
```

{{ .SchemaMarkdown | trimspace }}

### Filter Expressions

The `filter_expression_json` field accepts a JSON-encoded object with filter criteria. Available fields vary by usage group type.

**Tip**: Use the SELECT UI to configure complex filters, then switch to JSON mode and copy the expression into your Terraform configuration.

#### Tag Filtering

Different Snowflake tag types require specific filter fields in SELECT:
- `user_tags` - for tags associated with users
- `database_tags` - for tags associated with databases  
- `warehouse_tags` - for tags associated with warehouses
- `role_tags` - for tags associated with roles

**Coming Soon**: An `object_tags` field will be added to filter across all tag associations simultaneously.

## Import

`{{ .Name }}` can be imported using the usage group set ID and usage group ID separated by a forward slash:

```bash
terraform import {{ .Name }}.example <usage_group_set_id>/<usage_group_id>
```

To find the usage group ID, switch to JSON mode in the SELECT UI and copy the ID from the JSON document. See the `select_usage_group_set` resource documentation for obtaining the usage group set ID.
