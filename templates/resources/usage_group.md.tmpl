<!-- /docs/ is auto generated from the provider schema, and the templates in /templates do not edit files in /docs directly. -->
# {{ .Name }} (Resource)

{{ .Description | trimspace }}

## About 

Usage Groups provide a flexible way of creating cost categories within SELECT. To learn more about usage groups, see the [SELECT documentation](https://select.dev/docs/reference/using-select/usage-groups).

## Example Usage

### Basic Usage Group

{{ tffile .ExampleFile }}

### Advanced Filter Expression Examples

#### Filter by Role and Warehouse
```hcl
resource "select_usage_group" "analytics_team" {
  name               = "Analytics Team"
  order              = 1
  budget             = 5000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "and"
    filters = [
      {
        field    = "role_name"
        operator = "in"
        values   = ["ANALYST", "DATA_SCIENTIST"]
      },
      {
        field    = "warehouse_name" 
        operator = "in"
        values   = ["ANALYTICS_WH", "ML_WH"]
      }
    ]
  })
}
```

#### Filter by User or Database Tag
```hcl
resource "select_usage_group" "finance_users" {
  name               = "Finance Department"
  order              = 2
  budget             = 3000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "or"
    filters = [
      {
        field = "user_name"
        operator = "in"
        values = [
          "USER_NAME"
        ]
      },
      {
        field = "database_tags"
        operator = "array_contains"
        values = [
          "ORG_TEAM: finance"
        ]
      }
    ]
  })
}
```

### Usage Group Collecting Several Warehouses

Consider that you may have used the snowflake provider to create several related warehouses, and you want to collect them all into a single usage group.

```hcl
resource "snowflake_warehouse" "analytics_wh_xsmall" {
  name = "ANALYTICS_WH_XSMALL"
  warehouse_size = "XSMALL"
}

resource "snowflake_warehouse" "analytics_wh_large" {
  name = "ANALYTICS_WH_LARGE"
  warehouse_size = "LARGE"
}
```

Now we can create a usage group that collects all of the warehouses into a single usage group.

```hcl
resource "select_usage_group" "analytics_team" {
  name               = "Analytics Team"
  order              = 1
  budget             = 5000.0
  usage_group_set_id = select_usage_group_set.production.id
  
  filter_expression_json = jsonencode({
    operator = "and"
    filters = [
      {
        field    = "warehouse_name" 
        operator = "in"
        values   = [
          snowflake_warehouse.analytics_wh_xsmall.name,
          snowflake_warehouse.analytics_wh_large.name
        ]
      }
    ]
  })
}
```

{{ .SchemaMarkdown | trimspace }}

### Filter Expressions

The `filter_expression_json` field accepts a JSON encoded object that will be validated when applied. There's a wide variety of fields that can be filtered on depending on the type of usage group (such as Snowflake account or organization owned). 

To explore the fields that can be filtered on, or for complicated filter expressions containing multiple statements, we suggest using the SELECT UI to configure something close to the structure you need, and then switching to JSON mode and copying the expression into your terraform code, reformatting into a valid terraform block.

## Import

`{{ .Name }}` can be imported using the usage group set ID and usage group ID separated by a forward slash:

```bash
terraform import {{ .Name }}.example <usage_group_set_id>/<usage_group_id>
```

The ID of an existing usage group can be obtained by switching to JSON mode in the SELECT UI and copying the ID from the JSON document. See the `select_usage_group_set` resource documentation to see how to obtain the usage group set id.
